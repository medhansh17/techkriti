import React, { useEffect, useState } from "react";
import { Loader2, Info } from "lucide-react";

const FinancialRecordReport = () => {
  const [companyName, setCompanyName] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [financialData, setFinancialData] = useState(null);
  const [infoTooltip, setInfoTooltip] = useState(null);

  useEffect(() => {
    // Simulate loading and fetch data
    const fetchData = async () => {
      try {
        // Get company name from local storage
        const selectedCompany = localStorage.getItem("selectedCompany") || "Company";
        setCompanyName(selectedCompany);
        
        // Make API call to fetch financial data
        const response = await fetch("http://localhost:3000/scrapper", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ name: selectedCompany }),
        });
        
        if (!response.ok) {
          throw new Error("Failed to fetch financial data");
        }
        
        const data = await response.json();
        setFinancialData(data);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // Descriptions for financial parameters
  const parameterDescriptions = {
    "Market Cap": "Total market value of a company's outstanding shares of stock.",
    "Current Price": "The latest trading price of the company's stock.",
    "High / Low": "Highest and lowest stock price over a specific period.",
    "Stock P/E": "Price-to-Earnings ratio, a valuation metric comparing share price to earnings per share.",
    "Book Value": "Net asset value of a company, calculated by total assets minus intangible assets and liabilities.",
    "Dividend Yield": "Annual dividend payment expressed as a percentage of the stock price.",
    "ROCE": "Return on Capital Employed, measures company's profitability and efficiency with its capital.",
    "ROE": "Return on Equity, measures financial performance by dividing net income by shareholders' equity.",
    "Face Value": "The nominal value of a security stated by the issuer.",
    "Sales": "Total revenue generated by the company.",
    "OPM": "Operating Profit Margin, percentage of sales left after covering operating expenses.",
    "Profit after tax": "Net income after all taxes have been paid.",
    "Piotroski score": "A 9-point scale evaluating a company's financial strength.",
    "G Factor": "A metric to assess growth potential.",
    "Altman Z Score": "A formula for predicting bankruptcy, higher values indicate better financial health.",
    "Debt": "Total outstanding loans and borrowings.",
    "Debt to equity": "Ratio comparing a company's total debt to its shareholders' equity.",
    "Return on equity": "Profitability relative to shareholders' equity.",
    "Price to book value": "Ratio of market price per share to book value per share.",
    "Return on assets": "How efficiently a company uses its assets to generate profit.",
    "Sales growth": "Year-over-year percentage increase in revenue.",
    "Profit growth": "Year-over-year percentage increase in profit.",
    "CMP / FCF": "Current Market Price to Free Cash Flow ratio.",
    "Inven TO": "Inventory Turnover, how many times inventory is sold and replaced.",
    "Int Coverage": "Interest Coverage Ratio, ability to pay interest on outstanding debt."
  };

  // Group financial parameters into categories
  const financialCategories = {
    "Valuation Metrics": ["Market Cap", "Current Price", "High / Low", "Stock P/E", "Price to book value", "CMP / FCF"],
    "Profitability": ["OPM", "Profit after tax", "ROCE", "ROE", "Return on equity", "Return on assets"],
    "Growth": ["Sales growth", "Profit growth", "G Factor"],
    "Financial Health": ["Book Value", "Debt", "Debt to equity", "Altman Z Score", "Piotroski score", "Int Coverage"],
    "Operational Efficiency": ["Inven TO", "Sales"],
    "Shareholder Returns": ["Dividend Yield", "Face Value"]
  };

  // Handle showing info tooltip
  const showInfo = (param) => {
    setInfoTooltip(param);
  };

  // Handle hiding info tooltip
  const hideInfo = () => {
    setInfoTooltip(null);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-indigo-100 to-indigo-200 dark:from-gray-900 dark:to-gray-800">
        <div className="text-center">
          <Loader2
            className="mx-auto mb-4 animate-spin text-indigo-600 dark:text-indigo-400"
            size={64}
          />
          <p className="text-xl text-gray-700 dark:text-gray-300">
            Loading financial insights...
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-r from-indigo-100 to-indigo-200 dark:from-gray-900 dark:to-gray-800 p-6">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 dark:text-white mb-2">{companyName}</h1>
          <p className="text-xl text-gray-600 dark:text-gray-300">Financial Analysis Report</p>
        </div>

        {financialData && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {Object.entries(financialCategories).map(([category, params]) => (
              <div key={category} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div className="bg-indigo-600 dark:bg-indigo-800 px-4 py-3">
                  <h2 className="text-lg font-semibold text-white">{category}</h2>
                </div>
                <div className="p-4">
                  <table className="w-full">
                    <tbody>
                      {params.map(param => (
                        financialData.ratios[param] ? (
                          <tr key={param} className="border-b dark:border-gray-700 last:border-0">
                            <td className="py-3 pr-2 relative">
                              <div className="flex items-center">
                                <span>{param}</span>
                                <button
                                  className="ml-2 text-gray-500 hover:text-indigo-600 dark:hover:text-indigo-400"
                                  onMouseEnter={() => showInfo(param)}
                                  onMouseLeave={hideInfo}
                                >
                                  <Info size={16} />
                                </button>
                                {infoTooltip === param && (
                                  <div className="absolute z-10 left-0 top-10 w-64 p-2 bg-gray-800 text-white text-sm rounded shadow-lg">
                                    {parameterDescriptions[param]}
                                  </div>
                                )}
                              </div>
                            </td>
                            <td className="py-3 pl-2 text-right font-medium text-indigo-700 dark:text-indigo-300">
                              {financialData.ratios[param]}
                            </td>
                          </tr>
                        ) : null
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default FinancialRecordReport;